package uni.mapadventureproject.GUI;

import java.awt.Font;
import java.awt.FontFormatException;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import uni.mapadventureproject.GameManager;
import uni.mapadventureproject.Menu;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import javax.swing.ImageIcon;

/**
 * Intefaccia grafica che rappresenta il menù del gioco.
 *
 */
public class MenuGUI extends javax.swing.JFrame {

    Menu gMenu; // Entità che controlla il Menu

    // Font per la grafica
    Font font;
    Font fontMinecraft;

    // Costruttore
    public MenuGUI(GameManager gManager) {
        initComponents();
        init();
        gMenu = new Menu(gManager);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMenu = new javax.swing.JPanel();
        jbNuovo = new javax.swing.JButton();
        jbCarica = new javax.swing.JButton();
        jbEsci = new javax.swing.JButton();
        jTitolo1 = new javax.swing.JLabel();
        jTitolo2 = new javax.swing.JLabel();
        jlOscuro = new javax.swing.JLabel();
        jlLuce = new javax.swing.JLabel();
        jlVerde = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jmOpzioni = new javax.swing.JMenu();
        jmiNuovo = new javax.swing.JMenuItem();
        jmiCarica = new javax.swing.JMenuItem();
        jmAlza = new javax.swing.JMenu();
        jmAbbassa = new javax.swing.JMenu();
        jmMax = new javax.swing.JMenu();
        jmMuta = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Metastation: the last exam");
        setLocation(new java.awt.Point(0, 0));
        setPreferredSize(new java.awt.Dimension(700, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jpMenu.setLayout(null);

        jbNuovo.setBackground(new java.awt.Color(0, 102, 102));
        jbNuovo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbNuovo.setForeground(new java.awt.Color(255, 255, 255));
        jbNuovo.setText("Nuova Partita");
        jbNuovo.setToolTipText("Inizia una nuova avventura");
        jbNuovo.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 255, 255), new java.awt.Color(153, 255, 255)));
        jbNuovo.setFocusable(false);
        jbNuovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbNuovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNuovoActionPerformed(evt);
            }
        });
        jpMenu.add(jbNuovo);
        jbNuovo.setBounds(260, 150, 180, 30);

        jbCarica.setBackground(new java.awt.Color(0, 102, 102));
        jbCarica.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbCarica.setForeground(new java.awt.Color(255, 255, 255));
        jbCarica.setText("Carica Partita");
        jbCarica.setToolTipText("Carica e continua una partita salvata");
        jbCarica.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 255, 255), new java.awt.Color(153, 255, 255)));
        jbCarica.setFocusable(false);
        jbCarica.setPreferredSize(new java.awt.Dimension(180, 30));
        jbCarica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCaricaActionPerformed(evt);
            }
        });
        jpMenu.add(jbCarica);
        jbCarica.setBounds(260, 260, 180, 30);

        jbEsci.setBackground(new java.awt.Color(0, 102, 102));
        jbEsci.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbEsci.setForeground(new java.awt.Color(255, 255, 255));
        jbEsci.setText("Esci");
        jbEsci.setToolTipText("Chiudi il gioco");
        jbEsci.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 255, 255), new java.awt.Color(153, 255, 255)));
        jbEsci.setFocusable(false);
        jbEsci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEsciActionPerformed(evt);
            }
        });
        jpMenu.add(jbEsci);
        jbEsci.setBounds(260, 370, 180, 30);

        jTitolo1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jTitolo1.setForeground(new java.awt.Color(204, 255, 255));
        jTitolo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTitolo1.setText("Metastation:");
        jTitolo1.setPreferredSize(new java.awt.Dimension(700, 50));
        jpMenu.add(jTitolo1);
        jTitolo1.setBounds(0, 30, 700, 50);

        jTitolo2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jTitolo2.setForeground(new java.awt.Color(204, 255, 255));
        jTitolo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTitolo2.setText("the last exam");
        jTitolo2.setPreferredSize(new java.awt.Dimension(700, 40));
        jpMenu.add(jTitolo2);
        jTitolo2.setBounds(0, 70, 700, 40);

        jlOscuro.setIcon(new javax.swing.ImageIcon("resources//img//portale oscuro.png"));
        jpMenu.add(jlOscuro);
        jlOscuro.setBounds(0, 0, 350, 250);

        jlLuce.setIcon(new javax.swing.ImageIcon("resources//img//portale luce.png"));
        jpMenu.add(jlLuce);
        jlLuce.setBounds(0, 250, 350, 230);

        jlVerde.setIcon(new javax.swing.ImageIcon("resources//img//portale verde.png"));
        jpMenu.add(jlVerde);
        jlVerde.setBounds(350, -20, 350, 500);

        jMenuBar.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jMenuBar.setToolTipText("");
        jMenuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jmOpzioni.setText("Opzioni");

        jmiNuovo.setText("Nuova partita");
        jmiNuovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNuovoActionPerformed(evt);
            }
        });
        jmOpzioni.add(jmiNuovo);

        jmiCarica.setText("Carica partita");
        jmiCarica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCaricaActionPerformed(evt);
            }
        });
        jmOpzioni.add(jmiCarica);

        jMenuBar.add(jmOpzioni);

        jmAlza.setIcon(new ImageIcon("resources//img//alza.jpg"));
        jmAlza.setToolTipText("alza volume");
        jmAlza.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmAlzaMouseClicked(evt);
            }
        });
        jMenuBar.add(jmAlza);

        jmAbbassa.setIcon(new ImageIcon("resources//img//abbassa.jpg"));
        jmAbbassa.setToolTipText("abbassa volume");
        jmAbbassa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmAbbassaMouseClicked(evt);
            }
        });
        jMenuBar.add(jmAbbassa);

        jmMax.setIcon(new ImageIcon("resources//img//massimo.jpg"));
        jmMax.setToolTipText("volume massimo");
        jmMax.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmMaxMouseClicked(evt);
            }
        });
        jMenuBar.add(jmMax);

        jmMuta.setIcon(new ImageIcon("resources//img//muto.jpg"));
        jmMuta.setToolTipText("muta ");
        jmMuta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmMutaMouseClicked(evt);
            }
        });
        jMenuBar.add(jmMuta);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Viene inizializzato il gioco con un determinato font per i caratteri,
     * caricato da file.
     */
    private void init() {
        try {
            InputStream is = new BufferedInputStream(new FileInputStream("resources//font//Minecraftia-Regular.ttf"));
            font = Font.createFont(Font.TRUETYPE_FONT, is);
            fontMinecraft = font.deriveFont(Font.PLAIN, 12);

            this.setFont(fontMinecraft);
            jbNuovo.setFont(fontMinecraft);
            jbCarica.setFont(fontMinecraft);
            jbEsci.setFont(fontMinecraft);
            jMenuBar.setFont(fontMinecraft);
            jmOpzioni.setFont(fontMinecraft);
            jmiCarica.setFont(fontMinecraft);
            jmiNuovo.setFont(fontMinecraft);
        } catch (FontFormatException | IOException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Font non caricato correttamente; e'stato impostato un font di default.", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Carica una nuova partita
     *
     * @param evt ActionPerformed
     */
    private void jmiNuovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNuovoActionPerformed

        this.jbNuovoActionPerformed(evt);
    }//GEN-LAST:event_jmiNuovoActionPerformed

    /**
     * Chiude l'applicazione
     *
     * @param evt ActionPerformed
     */
    private void jbEsciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEsciActionPerformed
        int option;
        option = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler chiudere il gioco?", "Sei sicuro di voler chiudere il gioco", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jbEsciActionPerformed

    /**
     * Fa iniziare una nuova partita e fa apparire l'interfaccia per giocare
     *
     * @param evt ActionPerformed
     */
    private void jbNuovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNuovoActionPerformed

        try {

            gMenu.newGame(); // Carica la nuova partita

            //Per iniziare il gioco si passa al GameGUI
            GameGUI g = new GameGUI(gMenu.getgInteraction());
            g.setVisible(true);
            this.dispose();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Errore: " + e.getMessage(), "Errore nell'apertura del file", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Errore: " + e.getMessage(), e.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbNuovoActionPerformed

    /**
     * Carica una partita precedentemente salvata per poter continuare a giocare
     * da quel punto.
     *
     * @param evt ActionPerformed
     */
    private void jbCaricaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCaricaActionPerformed

        // Creazione del JFileChooser per selezionare il file
        JFileChooser fChooser = new JFileChooser();
        fChooser.setMultiSelectionEnabled(false);
        fChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fChooser.setCurrentDirectory(new File(".")); // Parte dalla cartella del progetto

        try {

            if (fChooser.showOpenDialog(this) == (JFileChooser.APPROVE_OPTION)) {

                // Carica il gioco con il file di partita selezionato
                gMenu.loadGame(fChooser.getSelectedFile().getAbsolutePath());

                //Per iniziare il gioco si passa al GameGUI
                GameGUI g = new GameGUI(gMenu.getgInteraction());
                g.setVisible(true);
                this.dispose();
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Errore: " + e.getMessage(), "Errore nell'apertura del file", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Errore: File non valido\n " + e.getMessage(), "File non valido", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbCaricaActionPerformed

    /**
     * Carica una partita precedentemente salvata per poter continuare a giocare
     * da quel punto.
     *
     * @param evt ActionPerformed
     */
    private void jmiCaricaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCaricaActionPerformed

        this.jbCaricaActionPerformed(evt);
    }//GEN-LAST:event_jmiCaricaActionPerformed

    /**
     * Alza il volume della musica
     *
     * @param evt MouseClicked
     */
    private void jmAlzaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmAlzaMouseClicked
        gMenu.getgInteraction().getGameManager().getMusic().volumeUpDownControl(0.1);
        
    }//GEN-LAST:event_jmAlzaMouseClicked

    /**
     * Abbassa il volume della musica
     *
     * @param evt MouseClicked
     */
    private void jmAbbassaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmAbbassaMouseClicked
        gMenu.getgInteraction().getGameManager().getMusic().volumeUpDownControl(-0.1);
    }//GEN-LAST:event_jmAbbassaMouseClicked

    /**
     * Alza al massimo il volume della musica
     *
     * @param evt MouseClicked
     */
    private void jmMaxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmMaxMouseClicked
        gMenu.getgInteraction().getGameManager().getMusic().volumeAbsoluteControl(1.0);
    }//GEN-LAST:event_jmMaxMouseClicked

    /**
     * Muta la musica
     *
     * @param evt MouseClicked
     */
    private void jmMutaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmMutaMouseClicked
        gMenu.getgInteraction().getGameManager().getMusic().volumeAbsoluteControl(0.0);
    }//GEN-LAST:event_jmMutaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JLabel jTitolo1;
    private javax.swing.JLabel jTitolo2;
    private javax.swing.JButton jbCarica;
    private javax.swing.JButton jbEsci;
    private javax.swing.JButton jbNuovo;
    private javax.swing.JLabel jlLuce;
    private javax.swing.JLabel jlOscuro;
    private javax.swing.JLabel jlVerde;
    private javax.swing.JMenu jmAbbassa;
    private javax.swing.JMenu jmAlza;
    private javax.swing.JMenu jmMax;
    private javax.swing.JMenu jmMuta;
    private javax.swing.JMenu jmOpzioni;
    private javax.swing.JMenuItem jmiCarica;
    private javax.swing.JMenuItem jmiNuovo;
    private javax.swing.JPanel jpMenu;
    // End of variables declaration//GEN-END:variables
}
